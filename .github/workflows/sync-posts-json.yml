name: Sync posts.json to website repository
on:
  push:
    paths:
      - '_posts/**'
  workflow_dispatch:
jobs:
  sync-posts-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout blog repository
        uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
      - name: Install dependencies
        run: gem install kramdown
      - name: List _posts directory
        run: ls -la _posts/
      - name: Generate posts.json
        run: |
          ruby -e '
            require "yaml"
            require "json"
            require "date"
            require "time"
            posts = {}
            files = Dir.glob("_posts/*.md")
            puts "Found #{files.length} files in _posts/: #{files.join(", ")}"
            files.each do |file|
              puts "Processing file: #{file}"
              begin
                content = File.read(file)
                match = content.match(/^---\n(.*?)\n---/m)
                unless match
                  puts "No front matter found in #{file}"
                  next
                end
                front_matter = YAML.safe_load(match[1], permitted_classes: [Time, Date])
                unless front_matter["date"]
                  puts "No date found in #{file}"
                  next
                end

                # Parse the date
                date = front_matter["date"]
                if date.is_a?(String)
                  begin
                    date = DateTime.parse(date)
                  rescue ArgumentError
                    puts "Invalid date format in #{file}: #{front_matter["date"]}"
                    next
                  end
                elsif !date.is_a?(Time) && !date.is_a?(DateTime)
                  puts "Date is not a valid type in #{file}: #{front_matter["date"].class}"
                  next
                end

                date_str = date.strftime("%Y-%m-%d")
                time_str = date.strftime("%H:%M")
                posts[date_str] ||= []
                posts[date_str] << {
                  "id" => date.strftime("%Y-%m-%d-%H%M"),
                  "time" => time_str,
                  "title" => front_matter["title"]
                }
                puts "Added post: #{date_str} - #{front_matter["title"]}"
              rescue StandardError => e
                puts "Error processing #{file}: #{e.message}"
                next
              end
            end
            sorted_posts = posts.sort_by { |date, _| Date.parse(date) }.reverse.to_h
            puts "Writing posts.json: #{sorted_posts.to_json}"
            File.write("posts.json", JSON.pretty_generate(sorted_posts))
          '
      - name: Show posts.json content
        run: cat posts.json
      - name: Commit posts.json to website repository
        env:
          WEBSITE_REPO_TOKEN: ${{ secrets.WEBSITE_REPO_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@users.noreply.github.com"
          git clone https://$WEBSITE_REPO_TOKEN@github.com/micaelaniemi/website.git website
          cp posts.json website/posts.json
          cd website
          git add posts.json
          if git status --porcelain | grep .; then
            git commit -m "Update posts.json from blog repository"
            git push
          else
            echo "No changes to posts.json"
          fi
